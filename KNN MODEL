{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOPTFdBlgNFs+L3g11/ENbE",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RUSHI-raj123/SINGLE-VARIABLE-NON-LINEAR-OPTIMIZATION/blob/main/KNN%20MODEL\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Zgp7JeuNhSfB"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import classification_report\n",
        "\n",
        "# Load the dataset from the GitHub URL\n",
        "url = 'https://raw.githubusercontent.com/vvrgit/AI/main/KNN-Sample.csv'\n",
        "df = pd.read_csv(url)# Display the first few rows of the dataset\n",
        "print(df.head())\n",
        "\n",
        "# Check for missing values\n",
        "print(df.isnull().sum())\n",
        "\n",
        "# Display data types\n",
        "print(df.dtypes)\n",
        "\n",
        "# Assuming the dataset has columns: 'Income', 'Balance', and 'Defaulter'\n",
        "# Convert 'Defaulter' column to binary values if it's not already\n",
        "df['Defaulter'] = df['Defaulter'].map({'Yes': 1, 'No': 0})\n",
        "\n",
        "# Define features and target variable\n",
        "X = df[['Income', 'Balance']]\n",
        "y = df['Defaulter']\n",
        "\n",
        "# Split the dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Standardize the features\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "\n",
        "# Initialize the KNN classifier with k=3\n",
        "knn = KNeighborsClassifier(n_neighbors=3)\n",
        "\n",
        "# Fit the model to the training data\n",
        "knn.fit(X_train_scaled, y_train)\n",
        "\n",
        "\n",
        "# Predict on the test set\n",
        "y_pred = knn.predict(X_test_scaled)\n",
        "\n",
        "# Display classification report\n",
        "print(classification_report(y_test, y_pred))\n",
        "\n",
        "# New customer data\n",
        "new_customer = pd.DataFrame({'Income': [16900], 'Balance': [1000]})\n",
        "\n",
        "# Standardize the new customer data\n",
        "new_customer_scaled = scaler.transform(new_customer)\n",
        "\n",
        "# Predict defaulter status\n",
        "prediction = knn.predict(new_customer_scaled)\n",
        "\n",
        "# Output the prediction\n",
        "result = 'Defaulter' if prediction[0] == 1 else 'Non-Defaulter'\n",
        "print(f\"The predicted status for the customer is: {result}\")\n",
        "\n"
      ]
    }
  ]
}